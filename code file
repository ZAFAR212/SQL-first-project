--The following is my code that I used to solve the business questions.
--The first part is creating the database which was used in the official website https://8weeksqlchallenge.com/case-study-1/
--Please note that I changed some of the syntax that was used in the website because the creator used Postgresql syntax whilst I conducted my project on the SQL server 
management studio which used MySQL.

*****CREATING THE DATABASE******
CREATE SCHEMA dannys_diner;
USE [8 week challenge case study 1]

CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');

-- ***********ANSWERING BUSINESS QUESTIONS******************

SELECT *
 FROM members;

SELECT *
 FROM menu;

SELECT *
 FROM sales;
--Q1)  What is the total amount each customer spent at the restaurant?

SELECT sales.customer_id,
       SUM(menu.price) AS total_expenditure
 FROM sales sales
 JOIN menu menu
 ON sales.product_id = menu.product_id
GROUP BY sales.customer_id
ORDER BY sales.customer_id;

--Customer A spent $76
--Customer B spent $74
--Customer C spent $36

-- Q2) How many days has each customer visited the restaurant?
SELECT customer_id,
       COUNT(DISTINCT order_date) AS total_visits
 FROM sales
GROUP BY customer_id
ORDER BY customer_id;

--Customer A --> 4 days
--Customer B --> 6 days
--Customer C --> 2 days

-- Q3) What was the first item from the menu purchased by each customer?

SELECT *
 FROM sales

SELECT *
 FROM menu

SELECT gen.customer_id,
       gen.item_rank,
	   menu.product_name 
 FROM (
       SELECT customer_id,
	          product_id,
	          ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) as item_rank
	    FROM sales
	   ) gen
 JOIN menu menu
 ON gen.product_id = menu.product_id
WHERE item_rank = 1;

--First item purchased by customer A was sushi
--First item purchased by customer B was curry
--First item purchased by custoemr C was ramen


--Q4) What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT sales.product_id,
       menu.product_name,
       COUNT(sales.product_id) AS demand
 FROM sales sales
 JOIN menu menu
 ON sales.product_id = menu.product_id
GROUP BY sales.product_id, menu.product_name
ORDER BY demand DESC;

--The most ordered item was ramen and it was purchased 8 times

--Q5) Which item was the most popular for each customer?
SELECT sales.customer_id,
       menu.product_name,
	   sales.item_rank
 FROM (
        SELECT customer_id,
	           product_id,
               RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(product_id) DESC) AS item_rank 
        FROM sales
       GROUP BY customer_id, product_id 
     ) sales
 JOIN menu menu
 ON sales.product_id = menu.product_id
WHERE sales.item_rank = 1

--The query shows that for customer A, ramen was the most popular. Customer B was indifferent 
-- between the 3 dishes and customer C only ate ramen.

--Q6) Which item was purchased first by the customer after they became a member?
SELECT *
 FROM members

SELECT * 
 FROM sales

SELECT *
 FROM (
SELECT sub.customer_id,
       sub.product_name,
	   sub.order_date,
       RANK() OVER (PARTITION BY sub.customer_id ORDER BY sub.order_date) AS item_rank
 FROM (
         SELECT sales.customer_id,
                menu.product_name,
	            sales.order_date
          FROM sales sales
          JOIN members members
          ON sales.customer_id = members.customer_id
          JOIN menu menu 
          ON sales.product_id = menu.product_id
         WHERE members.join_date < sales.order_date
     ) sub
) subtwo
WHERE item_rank = 1

--Customer A bought ramen and customer B bought sushi after they became members.

--Q7) Which item was purchased just before the customer became a member?
SELECT *
 FROM (
SELECT sub.customer_id,
       sub.product_name,
	   sub.order_date,
       RANK() OVER (PARTITION BY sub.customer_id ORDER BY sub.order_date DESC) AS item_rank
 FROM (
         SELECT sales.customer_id,
                menu.product_name,
	            sales.order_date
          FROM sales sales
          JOIN members members
          ON sales.customer_id = members.customer_id
          JOIN menu menu 
          ON sales.product_id = menu.product_id
         WHERE members.join_date > sales.order_date
     ) sub
) subtwo
WHERE item_rank = 1;

-- Customer A bought sushi and curry whilst B bought sushi before they became members.


--Q8) What is the total items and amount spent for each member before they became a member?


SELECT sales.customer_id,
       SUM(menu.price) AS total_expenditure_before_member,
	   COUNT(sales.customer_id) AS total_items_bought_before
 FROM sales sales
 JOIN menu menu
 ON sales.product_id = menu.product_id 
 JOIN members members
 ON members.customer_id = sales.customer_id
WHERE sales.order_date < members.join_date 
GROUP BY sales.customer_id

--Customer A spent $25 and bought 2 items whilst customer B spent $40 and bought 3 items before joining.


-- Q9) If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT sub.customer_id,
       SUM(sub.points) AS total_points
FROM (
       SELECT sales.customer_id,
              menu.product_id,
			  menu.price,
              CASE WHEN menu.product_id = 1 THEN menu.price*20
	              ELSE menu.price*10 END AS points
        FROM sales sales
        JOIN menu menu
         ON sales.product_id = menu.product_id
     ) sub
GROUP BY sub.customer_id

--Customer A made 860 points, customer B made 940 points and customer C made 360 points in total based on the points system.

--Q10) In the first week after a customer joins the program (including their join date) they earn 2x points on all items, 
--   not just sushi - how many points do customer A and B have at the end of January?
SELECT *
 FROM sales

SELECT *
 FROM members
--The join dates are 7th for A and 9th for B.

--2x points for sushi and for all products after 7th for A and 9th for B
SELECT sub.customer_id,
       SUM(sub.points) AS total_jan_points
 FROM (
       SELECT sales.customer_id,
              sales.product_id,
	          sales.order_date,
	          members.join_date,
	          menu.price,
	          CASE WHEN sales.order_date >= members.join_date OR menu.product_id = 1 
	          THEN menu.price*20 ELSE menu.price*10 END AS points
        FROM sales sales
        JOIN menu menu
        ON sales.product_id = menu.product_id
        JOIN members members
        ON members.customer_id = sales.customer_id
      WHERE sales.order_date != '2021-02-01'
	  ) sub
GROUP BY sub.customer_id

--CUSTOMER A received 1370 points in january and CUSTOMER B received 940 points in january.
